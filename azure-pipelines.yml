pool:
  name: Default

variables:
  - group: qdt.contact.management.variables
 
stages:

- stage: Build

  jobs:

  - job: BuildImage

    variables:
    - name: MAJOR
      value: $[variables['IMAGE_MAJOR_VERSION']]
    - name: MINOR
      value: $[variables['IMAGE_MINOR_VERSION']]
    - name: VERSION_PREFIX
      value: $(IMAGE_TAG_BASE):$(MAJOR).$(MINOR)
    - name: PATCH
      value: $[counter(variables['VERSION_PREFIX'], 1)]
    - name: VERSION
      value: $(VERSION_PREFIX).$(PATCH)

    steps:

    - script: |
        echo "Building ${VERSION}"
        docker build --no-cache --build-arg GIT_TOKEN=$(GIT_TOKEN) -t "${VERSION}" . || exit 1
      displayName: "Build new image"
      env:
        GIT_TOKEN: $(GIT_TOKEN)

    - script: |
        echo "Tagging ${IMAGE_TAG_BASE}:latest"
        docker tag "${VERSION}" "${IMAGE_TAG_BASE}:latest" || exit 1
      displayName: "Apply latest tag to new image"

    - script: |
        docker login -u "${DOCKER_REGISTRY_ID}" -p "${DOCKER_REGISTRY_SECRET}" "${DOCKER_REGISTRY_URI}" || exit 1
      displayName: 'Login to image registry'
      env:
        DOCKER_REGISTRY_SECRET: $(DOCKER_REGISTRY_SECRET)

    - script: |
        docker push "${VERSION}" || exit 1
      displayName: 'Push new image'

    - script: |
        docker push "${IMAGE_TAG_BASE}:latest" || exit 1
      displayName: 'Push new image (latest)'


- stage: DockerDeploy
  dependsOn: Build

  jobs:

  - job: DockerCompose

    steps:

    - task: DownloadSecureFile@1
      name: MSRLicense
      displayName: 'Download MSR License'
      inputs:
        secureFile: 'msr-license.xml'

    - task: DownloadSecureFile@1
      name: QDTContactManagementProperties
      displayName: 'Download application.properties'
      inputs:
        secureFile: 'qdt-contact-management.properties'

    - script: |
        # Check if the container exists
        if docker ps -a | grep -q msr-contact-management; then
            echo "Container msr-contact-management exists, stopping and removing it..."
            # Stop the container
            docker stop msr-contact-management
            # Remove the container
            docker rm msr-contact-management
            echo "Container msr-contact-management has been stopped and removed."
        else
            echo "Container msr-contact-management does not exist, no action needed."
        fi

      displayName: 'Stop and remove the existing MSR container'

    - script: |
        # My Azure Pipelines agents runs in Docker, so I cannot mount Azure Pipelines secure files in the MSR container
        cat /home/DAEDMZ/stai/cicd/licenseKey.xml
        docker run -d --name msr-contact-management \
          --network sag \
          -p 5555:5555 \
          -v /home/DAEDMZ/stai/cicd/licenseKey.xml:/opt/softwareag/IntegrationServer/config/licenseKey.xml:ro \
          -v /home/DAEDMZ/stai/cicd/application.properties:/opt/softwareag/IntegrationServer/application.properties:ro \
          staillansag/qdt-contact-management:latest
      displayName: 'Start the docker container'

    - script: |
        # My Azure Pipelines agents runs in Docker, so I need to connect to the container using the docker network
        url="http://msr-contact-management:5555"
        max_wait=120
        elapsed_time=0
        interval=5

        while true; do
            http_status=$(curl -o /dev/null -s -w "%{http_code}\n" $url)
            echo "HTTP status: $http_status"

            if [ "$http_status" -eq 200 ]; then
                exit 0
            else
                echo "MSR not ready, trying again in $interval seconds..."
            fi

            sleep $interval
            ((elapsed_time+=interval))

            if [ "$elapsed_time" -ge "$max_wait" ]; then
                echo "Error. MSR not ready after $max_wait seconds."
                exit 1
            fi
        done
      displayName: 'Wait for MSR to be deployed'

    - script: |
        health_json=$(curl -s http://msr-contact-management:5555/health)
        if [ -z "${health_json}" ]; then
          echo "Empty response to http://msr-contact-management:5555/health" && exit 1
        else
          echo "Health status for MSR container"
          echo ${health_json}
        fi
        status_checks=$(echo "$health_json" | jq '. | .. | .status? // empty | select(. != "UP")')
        if [[ -n "$status_checks" ]]; then
          echo "Error: One or more resources in MSR container are not 'UP'" && exit 1
        fi
        jdbc_state_checks=$(echo "$health_json" | jq '.Adapters.JDBCAdapter.Connections[] | select(.state == "suspended")')
        if [[ -n "$jdbc_state_checks" ]]; then
          echo "Error: One or more JDBC Adapter connections in MSR container are suspended"
          exit 1
        fi
      displayName: 'Check health of MSR container'

- stage: MSRTests
  dependsOn: DockerDeploy

  jobs:

  - job: RunMSRTests

    steps:

    - script: |
        cd ./resources/tests
        newman run ContactManagementAutomated.postman_collection.json -e ContactManagement.postman_environment.json \
          --env-var "url=http://msr-contact-management:5555/rad/qdtContactManagement.api:ContactManagementAPI" \
          --env-var "userName=Administrator" \
          --env-var "password=manage"
      displayName: 'Test API exposed by MSR'

- stage: APIProxyDeploy
  dependsOn: MSRTests

  jobs:

  - job: DeployAPIProxy

    steps:

    - script: |
        json=$(curl -s --location "${TEST_API_GATEWAY_URL}/rest/apigateway/archive?fixingMissingVersions=false&overwrite=*" --header 'accept: application/json' -u ${TEST_API_GATEWAY_USERNAME}:${TEST_API_GATEWAY_PASSWORD} --form "zipFile=@./resources/apim/ContactManagementAPI.zip")
        all_success=$(echo $json | jq 'all(.ArchiveResult[].[]; .status == "Success")')

        if [[ $all_success == "true" ]]; then
          echo "Import successful"
        else
          echo "Import failed"
          echo "Response: $json"
          exit 1
        fi
      displayName: 'Deploy the API proxy'
      env:
        TEST_API_GATEWAY_PASSWORD: $(TEST_API_GATEWAY_PASSWORD)
